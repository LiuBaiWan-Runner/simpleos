
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x000010dc memsz 0x000010dc flags r-x
    LOAD off    0x00002000 vaddr 0x0000a000 paddr 0x0000a000 align 2**12
         filesz 0x000038ec memsz 0x00008100 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042c  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     000000b0  0000802c  0000802c  0000102c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         000038ec  0000a000  0000a000  00002000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004800  0000d900  0000d900  000058ec  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  000058ec  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00005900  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000328  00000000  00000000  00005940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000015c  00000000  00000000  00005c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000108  00000000  00000000  00005dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d9  00000000  00000000  00005ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
0000802c l    d  .eh_frame	00000000 .eh_frame
0000a000 l    d  .data	00000000 .data
0000d900 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e74 l       .text	00000000 gdt_desc
00007e7a l       .text	00000000 idt_desc
00007e4f l       .text	00000000 task_0_entry
00000000 l    df *ABS*	00000000 os.c
0000b000 l     O .data	00001000 page_table
0000d8e8 l     O .data	00000004 task_tss.1766
0000d0e8 g     O .data	00000800 gdt_table
0000d900 g     O .bss	00001000 task0_dpl3_stack
0000e900 g     O .bss	00001000 task1_dpl3_stack
00007e80 g     F .text	00000016 task_0
0000d000 g     O .data	00000068 task0_tss
0000a000 g     O .data	00001000 map_phy_buffer
00007e60 g       .text	00000000 timer_int
00007f03 g     F .text	00000129 os_init
0000f900 g     O .bss	00001000 task1_dpl0_stack
0000d080 g     O .data	00000068 task1_tss
00007c00 g       .text	00000000 _start
00007eac g     F .text	0000001f outb
0000d8ec g       .bss	00000000 __bss_start
0000c000 g     O .data	00001000 pg_dir
0000d8ec g       .data	00000000 _edata
00012100 g       .bss	00000000 _end
00007e96 g     F .text	00000016 task_1
00010900 g     O .bss	00000800 idt_table
00011100 g     O .bss	00001000 task0_dpl0_stack
00007ecb g     F .text	00000038 task_sched



Disassembly of section .text:

00007c00 <_start>:

	// 以下是代码区
 	.text
_start: 
	// 根据16位实模式平坦模型初始化段寄存器都为0
	mov $0, %ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c09:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7c0b:	8e e0                	mov    %eax,%fs

	// 将栈空间指针移动到栈底，栈从高位向低位存储，高位为栈底，低位为栈顶
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:

	// 利用BIOS加载剩余代码到内存大小为32KB，64个扇区，通过寄存器传递参数
read_self_all:
	mov $_start_32, %bx			// 需要存放在内存中的起始地址
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx				// 指定起始扇区号
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax 			// AH为2指明读磁盘操作，AL指明读取的扇区数为64
	mov $0x80, %dx 				// 指明读取哪块磁盘，第一块磁盘
    7c1e:	00 cd                	add    %cl,%ch
	int $0x13 					// 软中断指令，通过中断向量表调用BIOS中的加载函数
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all 			// 条件跳转指令，如果读取失败会将EFLAGS的CF置一，循环进行读取，直至成功


	cli							// 关中断
    7c23:	fa                   	cli    
	lgdt gdt_desc				// 加载GDT表
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	74 7e                	je     7ca7 <read_self_all+0x94>
	lidt idt_desc				// 加载IDT表
    7c29:	0f 01 1e             	lidtl  (%esi)
    7c2c:	7a 7e                	jp     7cac <read_self_all+0x99>
	mov $1, %eax				// CR0寄存器PE位置一进入保护模式
    7c2e:	66 b8 01 00          	mov    $0x1,%ax
    7c32:	00 00                	add    %al,(%eax)
	lmsw %ax
    7c34:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG, $_start_32
    7c37:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:

	// 以下是代码区
 	.text
	
_start_32:
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7e0a:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7e0c:	8e e0                	mov    %eax,%fs

	// 将栈空间指针移动到栈底，栈从高位向低位存储，高位为栈底，低位为栈顶
	mov $_start, %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	call os_init
    7e13:	e8 eb 00 00 00       	call   7f03 <os_init>

	// 配置CR3寄存器，使其指向页目录表
	mov $pg_dir, %eax
    7e18:	b8 00 c0 00 00       	mov    $0xc000,%eax
	mov %eax, %cr3
    7e1d:	0f 22 d8             	mov    %eax,%cr3

	// 配置CR4寄存器，第4位置一，打开4M映射
	mov %cr4, %eax
    7e20:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax
    7e23:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e26:	0f 22 e0             	mov    %eax,%cr4

	// 配置CR0寄存器，最高位置一，打开分页机制
	mov %cr0, %eax
    7e29:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax
    7e2c:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e31:	0f 22 c0             	mov    %eax,%cr0

	mov $TASK0_TSS_SEG, %ax
    7e34:	66 b8 28 00          	mov    $0x28,%ax
	ltr %ax
    7e38:	0f 00 d8             	ltr    %ax

	push $APP_DATA_SEG			//SS
    7e3b:	6a 23                	push   $0x23
	push $task0_dpl3_stack + 1024 *4						//ESP
    7e3d:	68 00 e9 00 00       	push   $0xe900
	push $0x202					//EFLAGES
    7e42:	68 02 02 00 00       	push   $0x202
	push $APP_CODE_SEG			//CS
    7e47:	6a 1b                	push   $0x1b
	push $task_0_entry			//EIP
    7e49:	68 4f 7e 00 00       	push   $0x7e4f
	
	iret			//中断返回
    7e4e:	cf                   	iret   

00007e4f <task_0_entry>:


task_0_entry:
	mov $APP_DATA_SEG, %ax
    7e4f:	66 b8 23 00          	mov    $0x23,%ax
	mov %ax, %ds
    7e53:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e55:	8e c0                	mov    %eax,%es
	mov %ax, %gs
    7e57:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7e59:	8e e0                	mov    %eax,%fs
	jmp task_0
    7e5b:	e9 20 00 00 00       	jmp    7e80 <task_0>

00007e60 <timer_int>:


timer_int:

	push %ds		//保护现场，将DS段寄存器压栈
    7e60:	1e                   	push   %ds
	pusha			//保护现场，将部分通用寄存器的值压栈	Inter开发手册第二卷PUSHA/PUSHAD—Push All General-Purpose Registers
    7e61:	60                   	pusha  

	//中断返回前向8259发送0x20
	mov $0x20, %al
    7e62:	b0 20                	mov    $0x20,%al
	outb %al, $0x20
    7e64:	e6 20                	out    %al,$0x20

	mov $KERNEL_DATA_SEG, %ax
    7e66:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e6a:	8e d8                	mov    %eax,%ds

	call task_sched
    7e6c:	e8 5a 00 00 00       	call   7ecb <task_sched>

	popa			//恢复现场
    7e71:	61                   	popa   
	pop %ds
    7e72:	1f                   	pop    %ds

	iret			//中断返回指令
    7e73:	cf                   	iret   

00007e74 <gdt_desc>:
    7e74:	ff 07                	incl   (%edi)
    7e76:	e8                   	.byte 0xe8
    7e77:	d0 00                	rolb   (%eax)
	...

00007e7a <idt_desc>:
    7e7a:	ff 07                	incl   (%edi)
    7e7c:	00 09                	add    %cl,(%ecx)
    7e7e:	01 00                	add    %eax,(%eax)

00007e80 <task_0>:

#define MAP_ADDR	0x80000000
#define true		1
#define false		0

void task_0(){
    7e80:	55                   	push   %ebp
    7e81:	89 e5                	mov    %esp,%ebp
    7e83:	83 ec 10             	sub    $0x10,%esp
	uint8_t color = 0;
    7e86:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)

	while (true)
	{
		color ++;
    7e8a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7e8e:	83 c0 01             	add    $0x1,%eax
    7e91:	88 45 ff             	mov    %al,-0x1(%ebp)
    7e94:	eb f4                	jmp    7e8a <task_0+0xa>

00007e96 <task_1>:
	}
	
}

void task_1(){
    7e96:	55                   	push   %ebp
    7e97:	89 e5                	mov    %esp,%ebp
    7e99:	83 ec 10             	sub    $0x10,%esp
	uint8_t color = 0xff;
    7e9c:	c6 45 ff ff          	movb   $0xff,-0x1(%ebp)

	while (true)
	{
		color --;
    7ea0:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7ea4:	83 e8 01             	sub    $0x1,%eax
    7ea7:	88 45 ff             	mov    %al,-0x1(%ebp)
    7eaa:	eb f4                	jmp    7ea0 <task_1+0xa>

00007eac <outb>:
	[TASK1_TSS_SEG / 8] = {0x68, 0, 0xe900, 0}, 

};

// 封装汇编指令，将一字节数据发送到指定端口
void outb (uint8_t data, uint16_t port){
    7eac:	55                   	push   %ebp
    7ead:	89 e5                	mov    %esp,%ebp
    7eaf:	83 ec 08             	sub    $0x8,%esp
    7eb2:	8b 55 08             	mov    0x8(%ebp),%edx
    7eb5:	8b 45 0c             	mov    0xc(%ebp),%eax
    7eb8:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7ebb:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" :: [v]"a"(data), [p]"d"(port));
    7ebf:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7ec3:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7ec7:	ee                   	out    %al,(%dx)
}
    7ec8:	90                   	nop
    7ec9:	c9                   	leave  
    7eca:	c3                   	ret    

00007ecb <task_sched>:

void task_sched(){
    7ecb:	55                   	push   %ebp
    7ecc:	89 e5                	mov    %esp,%ebp
    7ece:	83 ec 10             	sub    $0x10,%esp
	static int task_tss = TASK0_TSS_SEG;

	task_tss = (task_tss == TASK0_TSS_SEG) ? TASK1_TSS_SEG : TASK0_TSS_SEG;
    7ed1:	a1 e8 d8 00 00       	mov    0xd8e8,%eax
    7ed6:	83 f8 28             	cmp    $0x28,%eax
    7ed9:	75 07                	jne    7ee2 <task_sched+0x17>
    7edb:	b8 30 00 00 00       	mov    $0x30,%eax
    7ee0:	eb 05                	jmp    7ee7 <task_sched+0x1c>
    7ee2:	b8 28 00 00 00       	mov    $0x28,%eax
    7ee7:	a3 e8 d8 00 00       	mov    %eax,0xd8e8
	uint32_t addr[] = {0, task_tss};
    7eec:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7ef3:	a1 e8 d8 00 00       	mov    0xd8e8,%eax
    7ef8:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm__ __volatile__("ljmpl *(%[a])" :: [a]"r"(addr));
    7efb:	8d 45 f8             	lea    -0x8(%ebp),%eax
    7efe:	ff 28                	ljmp   *(%eax)
}
    7f00:	90                   	nop
    7f01:	c9                   	leave  
    7f02:	c3                   	ret    

00007f03 <os_init>:

void timer_int ();
void os_init (void){
    7f03:	55                   	push   %ebp
    7f04:	89 e5                	mov    %esp,%ebp
    7f06:	83 ec 10             	sub    $0x10,%esp
	//配置两片8259
	outb(0x11, 0x20);		//对8259主片初始化
    7f09:	6a 20                	push   $0x20
    7f0b:	6a 11                	push   $0x11
    7f0d:	e8 9a ff ff ff       	call   7eac <outb>
    7f12:	83 c4 08             	add    $0x8,%esp
	outb(0x11, 0xA0);		//对8259从片初始化
    7f15:	68 a0 00 00 00       	push   $0xa0
    7f1a:	6a 11                	push   $0x11
    7f1c:	e8 8b ff ff ff       	call   7eac <outb>
    7f21:	83 c4 08             	add    $0x8,%esp
	outb(0x20, 0x21);		//指定主片从IDT中的0x20开始，这里的0x21指定是对主片操作
    7f24:	6a 21                	push   $0x21
    7f26:	6a 20                	push   $0x20
    7f28:	e8 7f ff ff ff       	call   7eac <outb>
    7f2d:	83 c4 08             	add    $0x8,%esp
	outb(0x28, 0xA1);		//指定从片从IDT中的0x28开始，这里的0xA1指定是对从片操作
    7f30:	68 a1 00 00 00       	push   $0xa1
    7f35:	6a 28                	push   $0x28
    7f37:	e8 70 ff ff ff       	call   7eac <outb>
    7f3c:	83 c4 08             	add    $0x8,%esp
	outb(1 << 2, 0x21);		//告诉主片他的IRQ2上连接了一个从片
    7f3f:	6a 21                	push   $0x21
    7f41:	6a 04                	push   $0x4
    7f43:	e8 64 ff ff ff       	call   7eac <outb>
    7f48:	83 c4 08             	add    $0x8,%esp
	outb(2, 0xA1);			//告诉从片他的IRQ2连接到了主片
    7f4b:	68 a1 00 00 00       	push   $0xa1
    7f50:	6a 02                	push   $0x2
    7f52:	e8 55 ff ff ff       	call   7eac <outb>
    7f57:	83 c4 08             	add    $0x8,%esp
	//设置8259的工作模式
	outb(0x1, 0x21);
    7f5a:	6a 21                	push   $0x21
    7f5c:	6a 01                	push   $0x1
    7f5e:	e8 49 ff ff ff       	call   7eac <outb>
    7f63:	83 c4 08             	add    $0x8,%esp
	outb(0x1, 0xA1);
    7f66:	68 a1 00 00 00       	push   $0xa1
    7f6b:	6a 01                	push   $0x1
    7f6d:	e8 3a ff ff ff       	call   7eac <outb>
    7f72:	83 c4 08             	add    $0x8,%esp
	//配置打开IQR0，即8253引脚的终端，屏蔽其他引脚的中断
	outb(0xfe, 0x21);
    7f75:	6a 21                	push   $0x21
    7f77:	68 fe 00 00 00       	push   $0xfe
    7f7c:	e8 2b ff ff ff       	call   7eac <outb>
    7f81:	83 c4 08             	add    $0x8,%esp
	outb(0xff, 0xA1);
    7f84:	68 a1 00 00 00       	push   $0xa1
    7f89:	68 ff 00 00 00       	push   $0xff
    7f8e:	e8 19 ff ff ff       	call   7eac <outb>
    7f93:	83 c4 08             	add    $0x8,%esp

	//配置8253定时器 实现每隔100ms产生一个中断
	//外部时钟源频率1193180Hz
	int tmo = 1193180 / 100;	//设置初始值
    7f96:	c7 45 fc 9b 2e 00 00 	movl   $0x2e9b,-0x4(%ebp)
	outb(0x36, 0x43);			//配置使用8253定时器中第0个定时器，工作在模式3，周期性的加载初始值产生中断
    7f9d:	6a 43                	push   $0x43
    7f9f:	6a 36                	push   $0x36
    7fa1:	e8 06 ff ff ff       	call   7eac <outb>
    7fa6:	83 c4 08             	add    $0x8,%esp
	//写入初始值，高八位第八位分开写入
	outb((uint8_t)tmo, 0x40);	//低八位
    7fa9:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7fac:	0f b6 c0             	movzbl %al,%eax
    7faf:	6a 40                	push   $0x40
    7fb1:	50                   	push   %eax
    7fb2:	e8 f5 fe ff ff       	call   7eac <outb>
    7fb7:	83 c4 08             	add    $0x8,%esp
	outb(tmo >> 8, 0x40);		//高八位
    7fba:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7fbd:	c1 f8 08             	sar    $0x8,%eax
    7fc0:	0f b6 c0             	movzbl %al,%eax
    7fc3:	6a 40                	push   $0x40
    7fc5:	50                   	push   %eax
    7fc6:	e8 e1 fe ff ff       	call   7eac <outb>
    7fcb:	83 c4 08             	add    $0x8,%esp


	//配置时钟中断处理函数偏移量
	idt_table[0x20].offset_l = (uint32_t)timer_int & 0xFFFF;		//低16位
    7fce:	b8 60 7e 00 00       	mov    $0x7e60,%eax
    7fd3:	66 a3 00 0a 01 00    	mov    %ax,0x10a00
	idt_table[0x20].offset_h = (uint32_t)timer_int >> 16;			//高16位
    7fd9:	b8 60 7e 00 00       	mov    $0x7e60,%eax
    7fde:	c1 e8 10             	shr    $0x10,%eax
    7fe1:	66 a3 06 0a 01 00    	mov    %ax,0x10a06
	idt_table[0x20].selector = KERNEL_CODE_SEG;						//选择子指向GDT表的代码段
    7fe7:	66 c7 05 02 0a 01 00 	movw   $0x8,0x10a02
    7fee:	08 00 
	idt_table[0x20].attr = 0x8E00;									//根据用户手册配置属性，指定表项为Interrupt Gate
    7ff0:	66 c7 05 04 0a 01 00 	movw   $0x8e00,0x10a04
    7ff7:	00 8e 
	

	gdt_table[TASK0_TSS_SEG / 8].basel = (uint16_t)(uint32_t)task0_tss;
    7ff9:	b8 00 d0 00 00       	mov    $0xd000,%eax
    7ffe:	66 a3 12 d1 00 00    	mov    %ax,0xd112
	gdt_table[TASK1_TSS_SEG / 8].basel = (uint16_t)(uint32_t)task1_tss;
    8004:	b8 80 d0 00 00       	mov    $0xd080,%eax
    8009:	66 a3 1a d1 00 00    	mov    %ax,0xd11a


	pg_dir[MAP_ADDR >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    800f:	b8 00 b0 00 00       	mov    $0xb000,%eax
    8014:	83 c8 07             	or     $0x7,%eax
    8017:	a3 00 c8 00 00       	mov    %eax,0xc800
	page_table[(MAP_ADDR >> 12) & 0x3FF] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    801c:	b8 00 a0 00 00       	mov    $0xa000,%eax
    8021:	83 c8 07             	or     $0x7,%eax
    8024:	a3 00 b0 00 00       	mov    %eax,0xb000
    8029:	90                   	nop
    802a:	c9                   	leave  
    802b:	c3                   	ret    
