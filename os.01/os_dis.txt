
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00000e1b memsz 0x00000e1b flags r-x
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000800 memsz 0x00000800 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021b  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000800  00008000  00008000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00001818  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000f8  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000007e  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000088  00000000  00000000  000019c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e6  00000000  00000000  00001a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00008000 l    d  .data	00000000 .data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e15 l       .text	00000000 gdt_desc
00000000 l    df *ABS*	00000000 os.c
00008000 g     O .data	00000800 gdt_table
00007c00 g       .text	00000000 _start
00008800 g       .data	00000000 __bss_start
00008800 g       .data	00000000 _edata
00008800 g       .data	00000000 _end



Disassembly of section .text:

00007c00 <_start>:

	// 以下是代码区
 	.text
_start: 
	// 根据16位实模式平坦模型初始化段寄存器都为0
	mov $0, %ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c09:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7c0b:	8e e0                	mov    %eax,%fs

	// 将栈空间指针移动到栈底，栈从高位向低位存储，高位为栈底，低位为栈顶
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:

	// 利用BIOS加载剩余代码到内存大小为32KB，64个扇区，通过寄存器传递参数
read_self_all:
	mov $_start_32, %bx			// 需要存放在内存中的起始地址
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx				// 指定起始扇区号
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax 			// AH为2指明读磁盘操作，AL指明读取的扇区数为64
	mov $0x80, %dx 				// 指明读取哪块磁盘，第一块磁盘
    7c1e:	00 cd                	add    %cl,%ch
	int $0x13 					// 软中断指令，通过中断向量表调用BIOS中的加载函数
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all 			// 条件跳转指令，如果读取失败会将EFLAGS的CF置一，循环进行读取，直至成功


	cli							// 关中断
    7c23:	fa                   	cli    
	lgdt gdt_desc				// 加载GDT表
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	15 7e 66 b8 01       	adc    $0x1b8667e,%eax
	mov $1, %eax				// CR0寄存器PE位置一进入保护模式
    7c2c:	00 00                	add    %al,(%eax)
    7c2e:	00 0f                	add    %cl,(%edi)
	lmsw %ax
    7c30:	01 f0                	add    %esi,%eax
	jmp $KERNEL_CODE_SEG, $_start_32
    7c32:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfd:	00 55 aa             	add    %dl,-0x56(%ebp)

00007e00 <_start_32>:

	// 以下是代码区
 	.text
	
_start_32:
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7e0a:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7e0c:	8e e0                	mov    %eax,%fs

	// 将栈空间指针移动到栈底，栈从高位向低位存储，高位为栈底，低位为栈顶
	mov $_start, %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp
	jmp .
    7e13:	eb fe                	jmp    7e13 <_start_32+0x13>

00007e15 <gdt_desc>:
    7e15:	ff 07                	incl   (%edi)
    7e17:	00                   	.byte 0x0
    7e18:	80 00 00             	addb   $0x0,(%eax)
