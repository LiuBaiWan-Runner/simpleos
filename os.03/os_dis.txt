
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00000fd8 memsz 0x00000fd8 flags r-x
    LOAD off    0x00001000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x00003800 memsz 0x00004000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037e  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000058  00007f80  00007f80  00000f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00003800  00009000  00009000  00001000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000800  0000c800  0000c800  00004800  2**3
                  ALLOC
  4 .comment      00000011  00000000  00000000  00004800  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00004818  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000225  00000000  00000000  00004858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000010c  00000000  00000000  00004a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000c5  00000000  00000000  00004b89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000154  00000000  00000000  00004c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00007f80 l    d  .eh_frame	00000000 .eh_frame
00009000 l    d  .data	00000000 .data
0000c800 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e40 l       .text	00000000 gdt_desc
00007e46 l       .text	00000000 idt_desc
00000000 l    df *ABS*	00000000 os.c
0000a000 l     O .data	00001000 page_table
0000c000 g     O .data	00000800 gdt_table
00009000 g     O .data	00001000 map_phy_buffer
00007e37 g       .text	00000000 timer_int
00007e6b g     F .text	00000113 os_init
00007c00 g       .text	00000000 _start
00007e4c g     F .text	0000001f outb
0000c800 g       .bss	00000000 __bss_start
0000b000 g     O .data	00001000 pg_dir
0000c800 g       .data	00000000 _edata
0000d000 g       .bss	00000000 _end
0000c800 g     O .bss	00000800 idt_table



Disassembly of section .text:

00007c00 <_start>:

	// 以下是代码区
 	.text
_start: 
	// 根据16位实模式平坦模型初始化段寄存器都为0
	mov $0, %ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c09:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7c0b:	8e e0                	mov    %eax,%fs

	// 将栈空间指针移动到栈底，栈从高位向低位存储，高位为栈底，低位为栈顶
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:

	// 利用BIOS加载剩余代码到内存大小为32KB，64个扇区，通过寄存器传递参数
read_self_all:
	mov $_start_32, %bx			// 需要存放在内存中的起始地址
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx				// 指定起始扇区号
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax 			// AH为2指明读磁盘操作，AL指明读取的扇区数为64
	mov $0x80, %dx 				// 指明读取哪块磁盘，第一块磁盘
    7c1e:	00 cd                	add    %cl,%ch
	int $0x13 					// 软中断指令，通过中断向量表调用BIOS中的加载函数
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all 			// 条件跳转指令，如果读取失败会将EFLAGS的CF置一，循环进行读取，直至成功


	cli							// 关中断
    7c23:	fa                   	cli    
	lgdt gdt_desc				// 加载GDT表
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	40                   	inc    %eax
    7c28:	7e 0f                	jle    7c39 <read_self_all+0x26>
	lidt idt_desc				// 加载IDT表
    7c2a:	01 1e                	add    %ebx,(%esi)
    7c2c:	46                   	inc    %esi
    7c2d:	7e 66                	jle    7c95 <read_self_all+0x82>
	mov $1, %eax				// CR0寄存器PE位置一进入保护模式
    7c2f:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax
    7c34:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG, $_start_32
    7c37:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:

	// 以下是代码区
 	.text
	
_start_32:
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7e0a:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7e0c:	8e e0                	mov    %eax,%fs

	// 将栈空间指针移动到栈底，栈从高位向低位存储，高位为栈底，低位为栈顶
	mov $_start, %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	call os_init
    7e13:	e8 53 00 00 00       	call   7e6b <os_init>

	// 配置CR3寄存器，使其指向页目录表
	mov $pg_dir, %eax
    7e18:	b8 00 b0 00 00       	mov    $0xb000,%eax
	mov %eax, %cr3
    7e1d:	0f 22 d8             	mov    %eax,%cr3

	// 配置CR4寄存器，第4位置一，打开4M映射
	mov %cr4, %eax
    7e20:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax
    7e23:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e26:	0f 22 e0             	mov    %eax,%cr4

	// 配置CR0寄存器，最高位置一，打开分页机制
	mov %cr0, %eax
    7e29:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax
    7e2c:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e31:	0f 22 c0             	mov    %eax,%cr0

	sti
    7e34:	fb                   	sti    
	jmp .
    7e35:	eb fe                	jmp    7e35 <_start_32+0x35>

00007e37 <timer_int>:

timer_int:

	push %ds		//保护现场，将DS段寄存器压栈
    7e37:	1e                   	push   %ds
	pusha			//保护现场，将部分通用寄存器的值压栈	Inter开发手册第二卷PUSHA/PUSHAD—Push All General-Purpose Registers
    7e38:	60                   	pusha  

	//中断返回前向8259发送0x20
	mov $0x20, %al
    7e39:	b0 20                	mov    $0x20,%al
	outb %al, $0x20
    7e3b:	e6 20                	out    %al,$0x20

	popa			//恢复现场
    7e3d:	61                   	popa   
	pop %ds
    7e3e:	1f                   	pop    %ds

	iret			//中断返回指令
    7e3f:	cf                   	iret   

00007e40 <gdt_desc>:
    7e40:	ff 07                	incl   (%edi)
    7e42:	00 c0                	add    %al,%al
	...

00007e46 <idt_desc>:
    7e46:	ff 07                	incl   (%edi)
    7e48:	00 c8                	add    %cl,%al
	...

00007e4c <outb>:
	[KERNEL_CODE_SEG / 8] = {0xffff, 0x0000, 0x9a00, 0x00cf},
	[KERNEL_DATA_SEG / 8] = {0xffff, 0x0000, 0x9200, 0x00cf},
};

// 封装汇编指令，将一字节数据发送到指定端口
void outb (uint8_t data, uint16_t port){
    7e4c:	55                   	push   %ebp
    7e4d:	89 e5                	mov    %esp,%ebp
    7e4f:	83 ec 08             	sub    $0x8,%esp
    7e52:	8b 55 08             	mov    0x8(%ebp),%edx
    7e55:	8b 45 0c             	mov    0xc(%ebp),%eax
    7e58:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7e5b:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" :: [v]"a"(data), [p]"d"(port));
    7e5f:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7e63:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7e67:	ee                   	out    %al,(%dx)
}
    7e68:	90                   	nop
    7e69:	c9                   	leave  
    7e6a:	c3                   	ret    

00007e6b <os_init>:

void timer_int ();
void os_init (void){
    7e6b:	55                   	push   %ebp
    7e6c:	89 e5                	mov    %esp,%ebp
    7e6e:	83 ec 10             	sub    $0x10,%esp
	//配置两片8259
	outb(0x11, 0x20);		//对8259主片初始化
    7e71:	6a 20                	push   $0x20
    7e73:	6a 11                	push   $0x11
    7e75:	e8 d2 ff ff ff       	call   7e4c <outb>
    7e7a:	83 c4 08             	add    $0x8,%esp
	outb(0x11, 0xA0);		//对8259从片初始化
    7e7d:	68 a0 00 00 00       	push   $0xa0
    7e82:	6a 11                	push   $0x11
    7e84:	e8 c3 ff ff ff       	call   7e4c <outb>
    7e89:	83 c4 08             	add    $0x8,%esp
	outb(0x20, 0x21);		//指定主片从IDT中的0x20开始，这里的0x21指定是对主片操作
    7e8c:	6a 21                	push   $0x21
    7e8e:	6a 20                	push   $0x20
    7e90:	e8 b7 ff ff ff       	call   7e4c <outb>
    7e95:	83 c4 08             	add    $0x8,%esp
	outb(0x28, 0xA1);		//指定从片从IDT中的0x28开始，这里的0xA1指定是对从片操作
    7e98:	68 a1 00 00 00       	push   $0xa1
    7e9d:	6a 28                	push   $0x28
    7e9f:	e8 a8 ff ff ff       	call   7e4c <outb>
    7ea4:	83 c4 08             	add    $0x8,%esp
	outb(1 << 2, 0x21);		//告诉主片他的IRQ2上连接了一个从片
    7ea7:	6a 21                	push   $0x21
    7ea9:	6a 04                	push   $0x4
    7eab:	e8 9c ff ff ff       	call   7e4c <outb>
    7eb0:	83 c4 08             	add    $0x8,%esp
	outb(2, 0xA1);			//告诉从片他的IRQ2连接到了主片
    7eb3:	68 a1 00 00 00       	push   $0xa1
    7eb8:	6a 02                	push   $0x2
    7eba:	e8 8d ff ff ff       	call   7e4c <outb>
    7ebf:	83 c4 08             	add    $0x8,%esp
	//设置8259的工作模式
	outb(0x1, 0x21);
    7ec2:	6a 21                	push   $0x21
    7ec4:	6a 01                	push   $0x1
    7ec6:	e8 81 ff ff ff       	call   7e4c <outb>
    7ecb:	83 c4 08             	add    $0x8,%esp
	outb(0x1, 0xA1);
    7ece:	68 a1 00 00 00       	push   $0xa1
    7ed3:	6a 01                	push   $0x1
    7ed5:	e8 72 ff ff ff       	call   7e4c <outb>
    7eda:	83 c4 08             	add    $0x8,%esp
	//配置打开IQR0，即8253引脚的终端，屏蔽其他引脚的中断
	outb(0xfe, 0x21);
    7edd:	6a 21                	push   $0x21
    7edf:	68 fe 00 00 00       	push   $0xfe
    7ee4:	e8 63 ff ff ff       	call   7e4c <outb>
    7ee9:	83 c4 08             	add    $0x8,%esp
	outb(0xff, 0xA1);
    7eec:	68 a1 00 00 00       	push   $0xa1
    7ef1:	68 ff 00 00 00       	push   $0xff
    7ef6:	e8 51 ff ff ff       	call   7e4c <outb>
    7efb:	83 c4 08             	add    $0x8,%esp

	//配置8253定时器 实现每隔100ms产生一个中断
	//外部时钟源频率1193180Hz
	int tmo = 1193180 / 100;	//设置初始值
    7efe:	c7 45 fc 9b 2e 00 00 	movl   $0x2e9b,-0x4(%ebp)
	outb(0x36, 0x43);			//配置使用8253定时器中第0个定时器，工作在模式3，周期性的加载初始值产生中断
    7f05:	6a 43                	push   $0x43
    7f07:	6a 36                	push   $0x36
    7f09:	e8 3e ff ff ff       	call   7e4c <outb>
    7f0e:	83 c4 08             	add    $0x8,%esp
	//写入初始值，高八位第八位分开写入
	outb((uint8_t)tmo, 0x40);	//低八位
    7f11:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7f14:	0f b6 c0             	movzbl %al,%eax
    7f17:	6a 40                	push   $0x40
    7f19:	50                   	push   %eax
    7f1a:	e8 2d ff ff ff       	call   7e4c <outb>
    7f1f:	83 c4 08             	add    $0x8,%esp
	outb(tmo >> 8, 0x40);		//高八位
    7f22:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7f25:	c1 f8 08             	sar    $0x8,%eax
    7f28:	0f b6 c0             	movzbl %al,%eax
    7f2b:	6a 40                	push   $0x40
    7f2d:	50                   	push   %eax
    7f2e:	e8 19 ff ff ff       	call   7e4c <outb>
    7f33:	83 c4 08             	add    $0x8,%esp


	//配置时钟中断处理函数偏移量
	idt_table[0x20].offset_l = (uint32_t)timer_int & 0xFFFF;		//低16位
    7f36:	b8 37 7e 00 00       	mov    $0x7e37,%eax
    7f3b:	66 a3 00 c9 00 00    	mov    %ax,0xc900
	idt_table[0x20].offset_h = (uint32_t)timer_int >> 16;			//高16位
    7f41:	b8 37 7e 00 00       	mov    $0x7e37,%eax
    7f46:	c1 e8 10             	shr    $0x10,%eax
    7f49:	66 a3 06 c9 00 00    	mov    %ax,0xc906
	idt_table[0x20].selector = KERNEL_CODE_SEG;						//选择子指向GDT表的代码段
    7f4f:	66 c7 05 02 c9 00 00 	movw   $0x8,0xc902
    7f56:	08 00 
	idt_table[0x20].attr = 0x8E00;									//根据用户手册配置属性，指定表项为Interrupt Gate
    7f58:	66 c7 05 04 c9 00 00 	movw   $0x8e00,0xc904
    7f5f:	00 8e 
	

	pg_dir[MAP_ADDR >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    7f61:	b8 00 a0 00 00       	mov    $0xa000,%eax
    7f66:	83 c8 07             	or     $0x7,%eax
    7f69:	a3 00 b8 00 00       	mov    %eax,0xb800
	page_table[(MAP_ADDR >> 12) & 0x3FF] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    7f6e:	b8 00 90 00 00       	mov    $0x9000,%eax
    7f73:	83 c8 07             	or     $0x7,%eax
    7f76:	a3 00 a0 00 00       	mov    %eax,0xa000
    7f7b:	90                   	nop
    7f7c:	c9                   	leave  
    7f7d:	c3                   	ret    
